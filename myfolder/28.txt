using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace codechal28
{
    class Program
    {
        static void Main(string[] args)
        {
            string s=Console.ReadLine();
            int len = s.Length;
            int i;
            int flag = 0;
            int k = 0;
            int c1 = 0;
            for (i = 0; i < len; ++i)
                {
                    if (s[0] == ')')
                        flag = 1;
                    else   if (s[i] == '(' || s[i] == ')')
                    {

                        if (s[i] == ')')
                        {
                            ++c1;
                            if (s[i] == '(')
                                flag = 1;
                        }

                    
                    
                    }
                    else
                    {
                        k = 1;
                        Console.WriteLine("invalid");
                    }

            }

            if(flag==1||c1==0)
                Console.WriteLine("no");
            else if(k==0)
                Console.WriteLine("yes");
            Console.ReadLine();
        }
    }
}





 2


soup
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace codechal28
{
    class Program
    {
        static void Main(string[] args)
        {
            string s = Console.ReadLine();
             int i;s.ToLower();
            char[] a = new char[26];
            char[] b = new char[26];
            int j;
            for(i=0;i<s.Length;++i)
            {

                ++a[(int)s[i] - 97];
            
            }

            
                       
            
            int num = Convert.ToInt32(Console.ReadLine());
            string[] msg = new string[num];
           
            for (i = 0; i < num; ++i)
            {
                msg[i] = Console.ReadLine();
            }

            for (i = 0; i < num; ++i)
            {
                for (j = 0; j < msg[i].Length; ++j)
                {

                    ++b[(int)(msg[i])[j] - 97];
                    
                }
            }

            Console.ReadLine();
        }
    }
}



Page of 
Alphabet Soup


 

Alphabet Soup

Develop a program that, given a “bowl of alphabet soup” along with one or more “messages” (i.e., character strings), determines, for each message, whether or not the bowl contains all the letters necessary to form the message.

Regarding the case (lower or upper) of letters, your program should treat a as being indistinguishable from A, b as being indistinguishable from B, etc. Hence, an occurrence of, say, F in a message is “covered by” an occurrence of f in the soup.

Note that the number of occurrences of each letter matters: if, for example, there are three occurrences of e/E in the soup but four (or more) occurrences of e/E in a message, that message cannot be formed from the letters in the soup.

As for non-letters appearing in a message (e.g., spaces, digits, punctuation symbols, etc.), they should be ignored in determining whether the message can be formed in the soup.

Input Format: 

The first line contains a string of letters, in no particular order and (typically) containing duplicates. This line represents the collection of letters in the bowl of soup. You may assume that this string has length between one and 60, inclusive. 

On the next line is a single positive integer 'm' indicating how many messages are to follow. Each of the next m lines contains a message, which is simply a string of characters, possibly including non-letters (such as punctuation marks).

You may assume that each message has length between one and 60, too. 

Output Format: 

Print each given message and report (using either “YES” or “NO”) whether or not it can be formed using the letters in the soup. (See sample output below for exact formatting.) 

Sample Input :

lhLoe

3

HELLO

eel 

eL,$H.

Sample Output:

HELLO : YES

eel : NO

eL,$H. : YES 




Magical String


Magical String I

Magical Girl Emily uses "magical strings" to cast spells. For her, a string X is magical if and only if X is composed of consecutive '(' characters followed by consecutive ')' characters. In a magical string, there should be atleast one '(' and one ')'. The string is invalid if it contains any character other than '(' and ')'.

Given a string, write a program to find whether it is magical or not.

 

Input and Output Format:

Input consists of a string. Assume that the maximum length of the string is 100.

Output 'invalid' if the string is invalid. Output 'yes' if the string is magical or 'no' if the string is not magical.

 

Sample Input 1:

(())))

Sample Output 1:

yes

 

Sample Input 2:

)))(((

Sample Output 2:

no
 

Sample Input 3:

(((&))

Sample Output 3:

invalid
 
