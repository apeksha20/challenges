
class Program
    {
        static void Main(string[] args)
        {

            int c;
            int n = Convert.ToInt32(Console.ReadLine());
            c = n / 2 + 1;
            int i, j;
            for (i = 0; i < n; ++i)
            {
                for (j = 0; j < n; ++j)
                {

                    if (i == 0)
                        Console.Write("1");
                    else if (j == c - 1 && i < n - 1)
                        Console.Write("1");
                    else if ((i == n - 1 && (j > 0 && j < c - 1)) || (i == n - 2 && j == 0))
                        Console.Write("1");
                    else
                        Console.Write("0");



                }
                Console.WriteLine();
            }


            Console.ReadLine();
        }
    }
}




2



class Program
    {
        static void Main(string[] args)
        {
            int n=Convert.ToInt32(Console.ReadLine());

            for (int i = 0; i < n; i++)
                Console.Write("C");
        
            int count=(n-4)/2;
        //    int k=2;
            int rem = (n - 2*count)/2;
            int val = (n - rem)/2;
            int rem1 = rem;
            for (int i = 0; i < count; i++)
            {
                Console.Write("\n");
                for (int j = 1; j <= val; j++)
                {
                    Console.Write("C");
                }
                for (int j = 1; j <= rem1; j++)
                {
                    Console.Write("S");
                }
                for (int j = 1; j <= val; j++)
                {
                    Console.Write("C");
                }
                --val;
                rem1=rem1+2;
            }
            Console.Write("\n");
            for (int i = 0; i < n; i++)
                Console.Write("S");
            Console.Write("\n");
            for (int i = 0; i < n; i++)
                Console.Write("S");
            int rem2 = (n - 2 * count) / 2;
          //  int rem3 = rem2 * 2;
            int val1 = 2*count ;
          //int val3=()
            for (int i = 0; i < count; i++)
            {
                Console.Write("\n");
                for (int j = 1; j <= rem2; j++)
                {
                    Console.Write("K");
                }
                for (int j = 1; j <= val1; j++)
                {
                    Console.Write("S");
                }
                for (int j = 1; j <= rem2; j++)
                {
                    Console.Write("K");
                }
                rem2++;
                val1 = val1 - 2;
            }
            
         
        
           /* int rem = (n - 2 * count) / 2;
            int val = n - rem;
            int rem1 = rem;
            for (int i = 0; i < count; i++)
            {
                for (int j = 1; j <= val; j++)
                {
                    Console.WriteLine("C");
                }
                for (int j = 1; j <= rem1; j++)
                {
                    Console.WriteLine("S");
                }
                for (int j = 1; j <= val; j++)
                {
                    Console.WriteLine("C");
                }
                --val;
                ++rem1;
            }*/
            Console.Write("\n");
            for (int i = 0; i < n; i++)
                Console.Write("K");
            Console.ReadLine();
        }
    }


Page of 
Pattern 3


Pattern III


Write a program to print letter J in a n*n grid.

 

Input and Output Format:

Input consists of a single integer 'n' that corresponds to the size of the grid.

If n is even assume n/2+1 to be the centre column.
 

 

Refer sample output for formatting specifications.

 

SampleInput1:

5

SampleOutput1:

11111

00100

00100

10100

01000

 

SampleInput2:

7

SampleOutput2:

1111111

0001000

0001000

0001000

0001000

1001000

0110000

 

Sample Input3:

9

Sample Output3:

111111111

000010000

000010000

000010000

000010000

000010000

000010000

100010000

011100000






using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace codechal291
{
    class Program
    {
        static void Main(string[] args)
        {
            string s;
            int n = Convert.ToInt32(Console.ReadLine());
            string[] names = new string[n];
            int i, j, k;
            int c = 0, pos=-1 ; 
            for (i = 0; i < n; ++i)
                names[i] = Console.ReadLine();
            for (i = 0; i < n; ++i)
            {
                c = 0;
                for (j = 0; j < names[i].Length; ++j)
                {
                    if ((names[i])[j] == ' ')
                    {
                        ++c;
                        pos = j;

                    }
                }

                if (c == 0)
                {
                    names[i] = names[i].ToUpper();
                    Console.WriteLine(names[i]);
                }

                else //if (c == 1)
                {
                    s = names[i].ToString();
                    for (k = 0; k < s.Length; ++k)
                    {
                        if ((k == 0 || k > pos) && (s[k] >= 97 && s[k] <= 122))
                        {
                            Console.Write((char)((int)s[k] - 32));
                        }

                        else if (k > 0 && k < pos && (s[k] >= 65 && s[k] <= 90))
                        {
                            Console.Write((char)((int)s[k] + 32));

                        }
                        else if (s[k + 1] == '.' && (s[k] >= 97 && s[k] <= 122))
                        {

                            Console.Write((char)((int)s[k] - 32));
                        }


                        else
                            Console.Write(s[k]);

                    }

                    Console.WriteLine();
                }
               

            }


                Console.ReadLine();


            











        }
    }
}



HELP THE WEB TEAM


 


 


 


HELP THE WEB TEAM 

 

When we were designing a web site for online registration for an event, we encountered a problem. In the registration form, there were fields to fill up your name information. Users don't all capitalize their names consistently. When we take the report of registered participants, the report did not look good due to inconsistent capitalizing. So we want the website to typically format the name information while processing the form. Can you help us in formatting a list of names?

Write a program to format a list of names.

Input Format:

Input consists of n+1 lines where n corresponds to the number of words in the list.

The first line contains the number n of names 

The following n lines each contain a name, a name can have 1 to 3 components 

A 1 component name is a family name, ex: CLEOPATRA 

A 2 component name is a first name followed by a family name, ex: Albert EINSTEIN 

A 3 component name is either a particle name (Leonardo da VINCI) or a name with a middle initial (John F. KENNEDY 

 

Output Format:

 For each name you should print its corresponding formatted version: 

The first name must start with an uppercase letter and be followed by lowercase letters 

The middle initial must be uppercase 

The family name must be uppercase 

The particle must be lower (the da in Leonardo da VINCI) 

 

Sample Input:

 5
CLEOpatra
AISHWARYA rai
jOHn f. KeNNeDy
leonardo DA Vinci
tyleR durdeN

 

Sample Output:

CLEOPATRA
Aishwarya RAI
John F. KENNEDY
Leonardo da VINCI
Tyler DURDEN

 
Page of 
IPL Pattern 2


IPL Pattern 2

 

Write a program to generate the given pattern.

 

CCCCCC

CCSSCC

SSSSSS

SSSSSS

KKSSKK

KKKKKK

 

Input and Output Format:

Input consists of a single integer, n. n is always an even integer. n>=6.

Refer sample input and output for formatting specifications.

 

Sample Input 1:

6

 

Sample Output 1:

CCCCCC

CCSSCC

SSSSSS

SSSSSS

KKSSKK

KKKKKK

Sample Input 2:
8

Sample Output 2:
CCCCCCCC
CCCSSCCC
CCSSSSCC
SSSSSSSS
SSSSSSSS
KKSSSSKK
KKKSSKKK
KKKKKKKK
 

 

        
    


 
