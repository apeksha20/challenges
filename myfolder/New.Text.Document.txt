Accordian Patience
USE COLLECTIONS. HINT : USE STACK 
 
You are to simulate the playing of games of ``Accordian'' patience, the rules for which are as follows: 
Deal cards one by one in a row from left to right, not overlapping. Whenever the card matches its immediate neighbour on the left, or matches the third card to the left, it may be moved onto that card. Cards match if they are of the same suit or same rank. After making a move, look to see if it has made additional moves possible. Only the top card of each pile may be moved at any given time. Gaps between piles should be closed up as soon as they appear by moving all piles on the right of the gap one position to the left. Deal out the whole pack, combining cards towards the left whenever possible. The game is won if the pack is reduced to a single pile. 
Situations can arise where more than one play is possible. Where two cards may be moved, you should adopt the strategy of always moving the leftmost card possible. Where a card may be moved either one position to the left or three positions to the left, move it three positions. 

Input Format 
Input data to the program specifies the order in which cards are dealt from the pack. The input contains a pair of lines, each line containing 26 cards separated by single space characters.  Cards are represented as a two character code. The first character is the face-value (A=Ace, 2-9, T=10, J=Jack, Q=Queen, K=King) and the second character is the suit (C=Clubs, D=Diamonds, H=Hearts, S=Spades). 

Output Format 
Output shows the number of cards in each of the piles remaining after playing ``Accordian patience'' with the pack of cards as described by the corresponding pair of input lines. 

Sample Input 1 
QD AD 8H 5S 3H 5H TC 4D JH KS 6H 8S JS AC AS 8D 2H QS TS 3S AH 4H TH TD 3C 6S 
8C 7D 4C 4S 7S 9H 7C 5D 2S KD 2D QH JD 6D 9D JC 2C KH 3D QC 6C 9S KC 7H 9C 5C 

Sample Output 1 
6 piles remaining: 40 8 1 1 1 1 

Sample Input 2 
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC AD 2D 3D 4D 5D 6D 7D 8D TD 9D JD QD KD 
AH 2H 3H 4H 5H 6H 7H 8H 9H KH 6S QH TH AS 2S 3S 4S 5S JH 7S 8S 9S TS JS QS KS 

Sample Output 2 
1 pile remaining: 52 
Sections1/21 2 Next

CATP
Home
Course
 Apeksha Agarwal  
00HOURS00MINUTES39SECONDS
This Section has 2 pages.
Problem
Submissions
  Rails
[Hint : Use Collections. Use Stack]

There is a famous railway station in PopPush City. Country there is incredibly hilly. The station was built in last century. Unfortunately, funds were extremely limited that time. It was possible to establish only a surface track. Moreover, it turned out that the station could be only a dead-end one (see picture) and due to lack of available space it could have only one track.



The local tradition is that every train arriving from the direction A continues in the direction B with coaches reorganized in some way. Assume that the train arriving from the direction A has N<1000 coaches numbered in increasing order 1,2,3,...N. The chief for train reorganizations must know whether it is possible to marshal coaches continuing in the direction B so that their order will be a1,a2,a3...aN. Help him and write a program that decides whether it is possible to get the required order of coaches. You can assume that single coaches can be disconnected from the train before they enter the station and that they can move themselves until they are on the track in the direction B. You can also suppose that at any time there can be located as many coaches as necessary in the station. But once a coach has entered the station it cannot return to the track in the direction A and also once it has left the station in the direction B it cannot return back to the station.

Input  Format
The first line of the input consists of an integer that corresponds to N. In the next  line, there is a permutation of 1,2,...N.

Output Format
Output  Yes if it is possible to marshal the coaches in the order required. Otherwise it contains No.

Sample Input
5
1 2 3 4 5


Sample Output
Yes

Sample Input
5
5 4 1 2 3


Sample Output
No


 

SectionsPrevious2/2 1 2


Cognizant Technology Solutions Powered by E-Box